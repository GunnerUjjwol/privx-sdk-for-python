from http import HTTPStatus

from privx_api.base import BasePrivXAPI
from privx_api.enums import UrlEnum
from privx_api.response import PrivXAPIResponse


class AuthAPI(BasePrivXAPI):
    """
    PrivX Authentication API
    """

    def authenticate(self, username: str, password: str):
        """
        Login api client to the API.

        Raises:
            An InternalAPIException on failure
        """
        # TODO: should return PrivXAPIResponse
        self._authenticate(username, password)

    def get_auth_service_status(self) -> PrivXAPIResponse:
        """
        Get microservice status.

        Returns:
            PrivXAPIResponse
        """
        response_status, data = self._http_get(UrlEnum.AUTH.STATUS)
        return PrivXAPIResponse(response_status, HTTPStatus.OK, data)

    def get_idp_client(self, idp_id: str) -> PrivXAPIResponse:
        """
        Get existing identity provider client configuration.

        Returns:
            PrivXAPIResponse
        """
        response_status, data = self._http_get(
            UrlEnum.AUTH.IDP_CLIENT,
            path_params={"idp_id": idp_id},
        )
        return PrivXAPIResponse(response_status, HTTPStatus.OK, data)

    def create_idp_client(self, idp_client: dict) -> PrivXAPIResponse:
        """
        Create an IDP client

        Returns:
            PrivXAPIResponse
        """
        response_status, data = self._http_post(
            UrlEnum.AUTH.IDP_CLIENTS, body=idp_client
        )
        return PrivXAPIResponse(response_status, HTTPStatus.CREATED, data)

    def update_idp_client(self, idp_id: str, idp_client: dict) -> PrivXAPIResponse:
        """
        Update an IDP client, see required fields from API docs.

        Returns:
            PrivXAPIResponse
        """
        response_status, data = self._http_put(
            UrlEnum.AUTH.IDP_CLIENT, path_params={"idp_id": idp_id}, body=idp_client
        )
        return PrivXAPIResponse(response_status, HTTPStatus.OK, data)

    def delete_idp_client(self, idp_id: str) -> PrivXAPIResponse:
        """
        Delete IDP client

        Returns:
            PrivXAPIResponse
        """
        response_status, data = self._http_delete(
            UrlEnum.AUTH.IDP_CLIENT, path_params={"idp_id": idp_id}
        )
        return PrivXAPIResponse(response_status, HTTPStatus.OK, data)

    def regenerate_idp_client_config(self, idp_id: str) -> PrivXAPIResponse:
        """
        Create a new identity provider configuration.
        client_id and client_secret are automatically generated by server.

        Returns:
            PrivXAPIResponse:
        """
        response_status, data = self._http_post(
            UrlEnum.AUTH.REGENERATE_IDP_CLIENT, path_params={"idp_id": idp_id}
        )
        return PrivXAPIResponse(response_status, HTTPStatus.OK, data)
